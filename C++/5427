#include <iostream>
#include <queue>

#define endl "\n"
int mAH[4] = {1,-1,0,0};
int mAV[4] = {0,0,1,-1};
#include <cstring>
using namespace std;

char sgbMap[1001][1001] ={0,};
bool sgbMapVisit[1001][1001] = {0,};
int main()
{
    int tc=0;
    cin>>tc;
    
    while(tc--)
    {
       int sgbRow = 3, sgbCol = 4;
       cin>>sgbCol>>sgbRow;
        
        memset(sgbMap, ' ', sizeof(sgbMap));
        memset(sgbMapVisit, false, sizeof(sgbMapVisit));
   
        queue<pair<int,int>> sgbQ;  
        queue<pair<int,int>> sgFire;
        
        for(int i=0; i<sgbRow; i++)
            for(int j=0; j<sgbCol; j++)
            {
               cin>>sgbMap[i][j];
                if(sgbMap[i][j]=='@')
                {
                    sgbQ.push({i,j});
                    sgbMapVisit[i][j] = 1;
                }
                else if(sgbMap[i][j] == '*')
                {
                    sgFire.push({i,j});
                } 
            }
   int sgbOut =0;
   bool IsSgOut = false;

   while(!sgbQ.empty())
   {
       int fireSz = sgFire.size();
       for(int i=0; i<fireSz; i++)
       {
           int fRow =  sgFire.front().first;
           int fCol = sgFire.front().second;
           sgFire.pop();

           for(int j=0; j<4; j++)
           {
               int fnrow = fRow + mAV[j];
               int fncol = fCol + mAH[j];

               if(0<=fnrow && fnrow < sgbRow && 0<= fncol && fncol < sgbCol)
               {
                   if(sgbMap[fnrow][fncol] != '#' && sgbMap[fnrow][fncol] !='*')
                   {
                       sgbMap[fnrow][fncol] = '*';
                       sgFire.push({fnrow,fncol});
                   }
               }
           }
       }

       int sz = sgbQ.size();
       for(int i=0; i<sz; i++)
       {
           int row = sgbQ.front().first;
           int col = sgbQ.front().second;
           sgbQ.pop();

           for(int j=0; j<4; j++)
           {
               int nrow = row + mAV[j];
               int ncol = col + mAH[j];

               if(0<=nrow && nrow < sgbRow && 0<= ncol && ncol < sgbCol)
               {
                   if(!sgbMapVisit[nrow][ncol] && sgbMap[nrow][ncol]=='.')
                   {
                        sgbMapVisit[nrow][ncol] = 1;
                        sgbQ.push({nrow,ncol});
                   }
               }
               else
               {
                   IsSgOut = true;
                   break;
               }
           }
       }
       sgbOut++;
       if(IsSgOut)
           break;
   }

   if(IsSgOut)
       cout << sgbOut<<endl;
   else
       cout << "IMPOSSIBLE"<<endl;
    }
    return 0;
}
