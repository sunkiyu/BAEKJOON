#include <iostream>
#include <queue>
int wallB1Visit[1001][1001][2] = {0,};
int mAH[4] = {1,-1,0,0};
int mAV[4] = {0,0,1,-1};
using namespace std;

int wallBreak1[1001][1001] = {0,};
int main()
{

   int wallBreakRow = 6, wallBreakCol = 4;
    cin>>wallBreakRow>>wallBreakCol;
for (int i = 0; i < wallBreakRow; i++)
    {
        string Inp;
        cin >> Inp;
        for (int j = 0; j < wallBreakCol; j++)
        {
            int Tmp = Inp[j] - '0';
            wallBreak1[i][j] = Tmp;
        }
    }


   int wb1Cnt = 1;
   queue<pair<pair<int,int>,pair<int,int>>> wb1Q;
   wb1Q.push({{0,0},{1,1}});
wallB1Visit[0][0][1]=1;
   while(!wb1Q.empty())
   {
       int row = wb1Q.front().first.first;
       int col = wb1Q.front().first.second;
       int cnt = wb1Q.front().second.first;
       int wb = wb1Q.front().second.second;
       wb1Q.pop();

       if(row == wallBreakRow -1 && col == wallBreakCol -1)
       {
           cout<<cnt<<endl;
           return 0;
       }

       for(int i=0; i<4; i++)
       {
           int nrow = row + mAV[i];
           int ncol = col + mAH[i];

           if(0<=nrow && nrow < wallBreakRow && 0<= ncol && ncol <wallBreakCol)
           {
                 if(wallBreak1[nrow][ncol]){
                   if(wb){
                       wallB1Visit[nrow][ncol][wb-1]=1;
                       wb1Q.push({{nrow,ncol},{cnt+1,wb-1}});
                   }
               }
               else if(wallBreak1[nrow][ncol] == 0 && wallB1Visit[nrow][ncol][wb] == 0)
               {
                   wallB1Visit[nrow][ncol][wb]=1;
                   wb1Q.push({{nrow,ncol},{cnt+1,wb}});
               }
           }
       }
   }
    cout<<-1<<endl;
    return 0;
}
