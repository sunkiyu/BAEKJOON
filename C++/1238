#include <iostream>
#include <vector>
#include <functional>
#include <algorithm>
#include <queue>

using namespace std;

vector<pair<int,int>> stuVil[1001];
vector<int> stuVilDB(1001,2e9);
vector<int> memoryDB(1001,0);
int main()
{
   int stu = 4, stuLines= 8, stuParty =2;
   cin>>stu>>stuLines>>stuParty;
    
   for(int i=0; i<stuLines; i++)
   {
       int a,b,c=0;
       cin>>a>>b>>c;
       stuVil[a].push_back({b,c});
   }
    
   function<void(int)> startDijkstar = [&](int cur)
   {
       priority_queue<pair<int,int>> dq;
       dq.push({0,cur});
       stuVilDB[cur] = 0;
       
       while(!dq.empty())
       {
           int cost = -dq.top().first;
           int curPos = dq.top().second;
           dq.pop();
                 
           for(int j=0; j<stuVil[curPos].size(); j++)
           {
               int next = stuVil[curPos][j].first;
               int nCost = stuVil[curPos][j].second;
               if(stuVilDB[next]>cost+nCost)
               {
                   stuVilDB[next]=cost+nCost;
                   dq.push({-(cost+nCost),next});
               }
           }
       }
   };
  
   for(int i=1; i<=stu; i++)
   {
       for(int k=1; k<=stu; k++)stuVilDB[k] = 2e9;
       startDijkstar(i);
       memoryDB[i] = stuVilDB[stuParty];
   }
   for(int k=1; k<=stu; k++)stuVilDB[k] = 2e9;
   startDijkstar(stuParty);
   for (int i = 1; i <=stu; i++) memoryDB[i]+= stuVilDB[i];

   sort(memoryDB.begin()+1,memoryDB.begin()+stu+1);
    cout<<memoryDB[stu]<<"\n";
    
    return 0;
}
