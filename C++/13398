#include<iostream>
#include<functional>

using namespace std;

int ContinueSumDP[100001] = { 0, };
int ContinueSumDP2[100001] = {0,};
int Arrays[100001] = { 0, };

int main()
{
	//10
	//10 - 4 3 1 5 6 - 35 12 21 - 1

	int arrayNo = 10;
    cin>>arrayNo;
	int maxArray = -2e9;
    
    for(int i=1; i<=arrayNo; i++)
    {
        cin>> Arrays[i];
    }
    if(arrayNo==1)
    {
        cout<<Arrays[1]<<endl;
        return 0;
    }
    
    ContinueSumDP[1] = Arrays[1];
    maxArray = max(maxArray,ContinueSumDP[1]);
  
  //수를 제거하지 않았을 경우 구간별 최대합을 구한다.
	for (int j = 2; j <= arrayNo; j++)
	{
		ContinueSumDP[j] = max(Arrays[j], ContinueSumDP[j - 1] + Arrays[j]);
	    maxArray = max(maxArray,ContinueSumDP[j]);
    }
    
    //수열의 역순의 구간별 합을 구한다.
    ContinueSumDP2[arrayNo] = Arrays[arrayNo];

    for(int i=arrayNo-1; i>=1; i--)
    {
        ContinueSumDP2[i] = max(Arrays[i], ContinueSumDP2[i+1] + Arrays[i]);
    }
    
    //해당 숫자를 제거하였을 때 구간별 합을 구한다.
    //[ 왼쪽구간][제거 인덱스][오른쪽 구간]
    //제거 인덱스를 제외하였을 때 구간 최대합은 왼쪽구간 + 오른쪽 구간이다.
	for (int i = 1; i <=arrayNo; i++)
	{
        maxArray = max(maxArray, ContinueSumDP[i-1] + ContinueSumDP2[i+1]);
	}

    
    cout<<maxArray<<"\n";
	return 0;
}
