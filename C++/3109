#include <iostream>
#include <functional>

using namespace std;

char gasTheftMap[10001][501] = {0,};
bool gasVisit[10001][501] = {0,};

int main()
{
   int gasRow =5, gasCol =5;
    cin>>gasRow >> gasCol;
    
    for(int i=0; i<gasRow; i++)
        for(int j=0; j<gasCol; j++)
            cin>>gasTheftMap[i][j];
    
   int gasRmv[3] = {-1,0,1};
   int gasCmv[3] = {1,1,1};

   int maxGas=0;

   int tmpGas = 0;
   function<bool(pair<int,int>&&)> gasDFS = [&](pair<int,int> && pos)
   {
       int row =pos.first;
       int col = pos.second;
       gasVisit[row][col] = 1;

       if(col == gasCol-1)
       {
           return true;
       }

       //최대한 많은 가스관을 연결해야하므로 오른쪽 위부터 탐색한다.
       // 오른쪽 아래나 오른쪽을 탐색하게 되면 다른 노드의 경로와 X 간선이 생겨 가스관을 못만드는 경우가 있다.
       // 그리디로 연결 가능한 부분만 Visit 하게 되어 다른 경로가 Visit 할 곳을 막지 않는다.
       for(int i=0; i<3; i++)
       {
           int nrow = row + gasRmv[i];
           int ncol = col + gasCmv[i];

           if(0<=nrow  && nrow < gasRow && 0<= ncol && ncol < gasCol)
           {
               if(!gasVisit[nrow][ncol] && gasTheftMap[nrow][ncol]=='.')
               {
                   bool ret = gasDFS({nrow,ncol});
                   if(ret)
                       return ret;
               }

           }
       }

       return false;
   };

   for(int i=0; i<gasRow; i++)
   {
       if(gasDFS(pair<int,int>({i,0}))) maxGas++;
   };
    
   cout << maxGas <<endl;
    return 0;
}
