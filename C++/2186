#include <iostream>
#include <vector>
#include <queue>

char wordMap[101][101] = {0,};
int wordMapCheck[101][101][4][27] = {0,};

int mAH[4] = {1,-1,0,0};
int mAV[4] = {0,0,1,-1};

using namespace std;

int main()
{
    int wrow = 4, wcol =4, wk =1;
    cin>>wrow>>wcol>>wk;
    
    string tmp="";
    for (int i = 0; i < wrow; i++)
    {
        cin>>tmp;
        for (int j = 0; j < wcol; j++)
        {
            wordMap[i][j] = tmp[j];
        }
    }
    
    string findWord = "BREAK";
    cin>>findWord;
    vector<pair<int,int>> wstartP;

    for(int i=0; i<wrow; i++)
        for(int j=0; j<wcol; j++)
        {
            if(wordMap[i][j]==findWord[0])
            {
                wstartP.push_back({i,j});
            }
        }

    int maxIdx = findWord.length()-1;
    int wAnsCnt =0;
    for(int i=0; i<wstartP.size(); i++)
    {
        queue<pair<pair<int,int>,int>> wQ;
        wQ.push({{wstartP.front().first,wstartP.front().second},0});

        while (!wQ.empty())
        {
            int row = wQ.front().first.first;
            int col = wQ.front().first.second;
            int idx = wQ.front().second;
            wQ.pop();

            if(idx == maxIdx)
            {
                wAnsCnt++;
                continue;
            }
            for(int i=0; i<4; i++)
            {
                int moveAble = wk;
                int nrow = row  + mAV[i];
                int ncol = col + mAH[i];

                while(moveAble>0)
                {
                     moveAble--;
                    if(0<=nrow && nrow< wrow && 0<=ncol && ncol <wcol && wordMap[nrow][ncol] == findWord[idx+1])
                    {
                        if(!wordMapCheck[nrow][ncol][i][findWord[idx+1]-'0'])
                        {
                            wordMapCheck[nrow][ncol][i][findWord[idx+1]-'0'] =1;
                            wQ.push({{nrow,ncol},idx+1});
                        }
                    }
                    else
                    {
                        if(moveAble)
                        {
                            nrow += mAV[i];
                            ncol += mAH[i];
                        }
                    }
                }
            }
        }
    }
    cout<<wAnsCnt<<endl;
    
    return 0;
}
