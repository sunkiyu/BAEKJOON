#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int main()
{
	int imAV[8] = { -1,1,0,0,-1,-1,1,1 };
	int imAH[8] = { 0,0,-1,1,-1,1,-1,1 };

	while (1)
	{
		int islandRow = 4, islandCol = 5;
		cin >> islandCol >> islandRow;
		if (islandRow == 0 && islandCol == 0)break;
		vector<vector<int>> islandMap(islandRow, vector<int>(islandCol, 0));
		vector<vector<int>> islandVisit(islandRow, vector<int>(islandCol, 0));

		for (int i = 0; i < islandRow; i++)
			for (int j = 0; j < islandCol; j++)
			{
				cin >> islandMap[i][j];
			}

		int islandCnt = 0;
		for (int i = 0; i < islandRow; i++)
		{
			for (int j = 0; j < islandCol; j++)
			{
				if (!islandVisit[i][j] && islandMap[i][j] == 1)
				{
					queue<pair<int, int>> islandQ;
					islandVisit[i][j] = 1;
					islandQ.push({ i,j });
					islandCnt++;

					while (!islandQ.empty())
					{
						int row = islandQ.front().first;
						int col = islandQ.front().second;
						islandQ.pop();

						for (int k = 0; k < 8; k++)
						{
							int nrow = row + imAV[k];
							int ncol = col + imAH[k];

							if (0 <= nrow && nrow < islandRow && 0 <= ncol && ncol < islandCol && islandMap[nrow][ncol])
							{
								if (islandVisit[nrow][ncol])continue;
								islandVisit[nrow][ncol] = 1;
								islandQ.push({ nrow,ncol });
							}
						}
					}
				}
			}
		}

		cout << islandCnt << endl;
	}

	return 0;
}
