#include<iostream>
#include<cstring>
#include<string>
#include<queue>
#include <functional>

#define endl "\n"
using namespace std;
    int johapVisit[25] ={0,};
int sevenPrince[5][5], Answer;
bool Select[25];
 
int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1 ,0, 0 };
 
 
bool MoreThanFour()
{
    int Cnt = 0;
    for (int i = 0; i < 25; i++)
    {
        if (johapVisit[i] == true)
        {
            int x = i / 5;
            int y = i % 5;
 
            if (sevenPrince[x][y] == 2) Cnt++;
        }
    }
    if (Cnt >= 4) return true;
    else return false;
}
 
bool Adjacency()
{
    queue <pair<int, int>> Q;
    bool Check_Select[5][5];
    bool Queue_Select[5][5];
    bool Check_Answer = false;
 
    memset(Queue_Select, false, sizeof(Queue_Select));
    memset(Check_Select, false, sizeof(Check_Select));
 
    int Tmp = 0;
    for (int i = 0; i < 25; i++)
    {
        if (johapVisit[i] == true)
        {            
            int x = i / 5;
            int y = i % 5;
            Check_Select[x][y] = true;
 
            if (Tmp == 0)
            {
                Q.push(make_pair(x, y));
                Queue_Select[x][y] = true;
                Tmp++;
            }
        }
    }
 
    int Cnt = 1;
    while (Q.empty() == 0)
    {
        int x = Q.front().first;
        int y = Q.front().second;
        Q.pop();
 
        if (Cnt == 7)
        {
            Check_Answer = true;
            break;
        }
 
        for (int i = 0; i < 4; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
 
            if (nx >= 0 && ny >= 0 && nx < 5 && ny < 5)
            {
                if (Check_Select[nx][ny] == true && Queue_Select[nx][ny] == false)
                {
                    Queue_Select[nx][ny] = true;
                    Q.push(make_pair(nx, ny));
                    Cnt++;
                }
            }
        }
    }
 
    if (Check_Answer == true) return true;
    return false;
}
 

 
int main(void)
{
    for (int i = 0; i < 5; i++)
    {
        string Inp;
        cin >> Inp;
        for (int j = 0; j < Inp.length(); j++)
        {
            if (Inp[j] == 'Y') sevenPrince[i][j] = 1;
            else if (Inp[j] == 'S') sevenPrince[i][j] = 2;
        }
    } 

   function<void(int,int)> sevenJoHap = [&](int idx,int cnt)
   {
       if(cnt==7)
       {
          if (MoreThanFour() == true)
          {
            if (Adjacency() == true) Answer++;
          }
          return;
       }

         for(int i=idx; i<25; i++)
         {
             if(johapVisit[i])
                 continue;
             johapVisit[i] = 1;
             sevenJoHap(i+1,cnt+1);
             johapVisit[i] = 0;
         }
   };
   sevenJoHap(0,0);
    cout << Answer << endl;
 
    return 0;
}
