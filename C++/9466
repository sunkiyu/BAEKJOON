#include<iostream>
#include<functional>
#include <queue>
#include <cstring>

using namespace std;
int studTeam[100001] = { 0, };
bool studVisit[100001] = { 0, };
bool alreadyTeam[100001] = { 0, };
int cnt = 0;
int main()
{
	//   2
//   7
//   3 1 3 7 3 4 6
//   8
//   1 2 3 4 5 6 7 8
	int tc = 0;
	cin >> tc;
	while (tc--) {
		int studNum = 8, calcStud = 8;
		cin >> studNum;
		calcStud = studNum;
		for (int i = 1; i <= studNum; i++)
		{
			cin >> studTeam[i];
		}
		function<void(int)> studTeamDFS = [&](int curStud)
		{
			studVisit[curStud] = true;
			int next = studTeam[curStud];


			if (!studVisit[next]) {
				studTeamDFS(next);
			}
			//next가 이미 방문한 노드라면 사이클 발생, 즉 팀 성립 조건 OK
			else if (!alreadyTeam[next])
			{
			        //next 부터 사이클이 발생하기 전까지 팀이 될 수 있는 멤버의 수를 센다.
				for (int i = next; i != curStud; i = studTeam[i]) {
					cnt++;
				}
				//curStud 나 자신도 멤버의 수로 증가시킨다.
				cnt++;
			}
			//현재 노드까지는 이미 팀이 완성됨. 계산이 끝났으므로 더 탐색해도 의미가 없다.
			alreadyTeam[curStud] = true;
		};

		for (int i = 1; i <= studNum; i++)
		{
			if (studVisit[i])continue;
			studTeamDFS(i);
		}

		cout << studNum - cnt << endl;
		cnt = 0;
		memset(studVisit, 0, sizeof(studVisit));
		memset(alreadyTeam, 0, sizeof(alreadyTeam));

	}

	return 0;
}
