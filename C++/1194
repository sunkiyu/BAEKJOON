#include<iostream>
#include<queue>

using namespace std;

int mAV[4] = { 1,-1,0,0 };
int mAH[4] = { 0,0,1,-1 };

char minsikMap[51][51] = { 0, };
bool minsikVisit[51][51][64] = { 0, };


int main()
{
																				/*7 8
																				a#c#eF.1
																				.#.#.#..
																				.#B#D###
																				0....F.1
																				C#E#A###
																				.#.#.#..
																				d#f#bF.1*/
	int mapRow = 7, mapCol = 8;
    cin>>mapRow>>mapCol;
    
    //좌표, 키, cnt
	queue<pair<pair<int, int>,pair<int,int>>> msQ;
    for(int i=0; i<mapRow; i++)
    {
        for(int j=0; j<mapCol; j++)
        {
            cin>>minsikMap[i][j];
            if(minsikMap[i][j]=='0')
            {
                msQ.push({ { i,j },{0,0} });
                minsikVisit[i][j][0] = 1;
            }
        }
    }

	while (!msQ.empty())
	{
		int row = msQ.front().first.first;
		int col = msQ.front().first.second;
		int key = msQ.front().second.first;
		int cnt = msQ.front().second.second;
		msQ.pop();

		if (minsikMap[row][col] == '1')
		{
			cout << cnt << endl;
			return 0;
		}

		for (int i = 0; i < 4; i++)
		{
			int nrow = row + mAV[i];
			int ncol = col + mAH[i];

			if (0 <= nrow && nrow < mapRow && 0 <= ncol && ncol < mapCol && minsikMap[nrow][ncol] != '#')
			{
				if (minsikVisit[nrow][ncol][key])continue;
        //문의 위치
				if (65 <= minsikMap[nrow][ncol] && minsikMap[nrow][ncol] <= 90)
				{
          //키가 없다면 방문 못함
					if (key != (key |( 1 << minsikMap[nrow][ncol] - 'A'))) 
						continue;
					else
					{
          //키가 있으면 방문 가능
						minsikVisit[nrow][ncol][key] = true;
						msQ.push({ {nrow,ncol},{key,cnt + 1} });
					}
				}
        //키의 위치
				else if (97 <= minsikMap[nrow][ncol] && minsikMap[nrow][ncol] <= 122)
				{
          //키를 얻는다.
					int nkey = key | 1 << minsikMap[nrow][ncol] - 'a';
					minsikVisit[nrow][ncol][nkey]= true;
					msQ.push({ {nrow,ncol}, {nkey,cnt + 1} });
				}
				else
				{
					minsikVisit[nrow][ncol][key] = true;
					msQ.push({ { nrow,ncol },{key,cnt + 1 } });
				}
			}
		}
	}

	cout<<-1<<endl;
	return 0;
}

